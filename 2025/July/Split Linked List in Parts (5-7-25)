https://leetcode.com/problems/split-linked-list-in-parts/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
struct ListNode** splitListToParts(struct ListNode* head, int k, int* returnSize) {
     struct ListNode** arr = (struct ListNode **)malloc(k * sizeof(struct ListNode *));
   
    struct ListNode *temp=head;
    int count=0,i=0;
    while(temp!=NULL)
    {
        count++;
        temp=temp->next;
    }
    int size=count/k;
    temp=head;
    while(i<k)
    { size=count/k;
        arr[i]=temp;
        size=size+(i < (count % k) ? 1:0);
        for(int j=1;j<size && temp!=NULL;j++)
        {
            temp=temp->next;
        }
         if (temp != NULL) {
            struct ListNode* nextpart = temp->next;
            temp->next = NULL;
            temp = nextpart;
        }
        i++;
    }
     *returnSize=k;
     return arr;
   }
