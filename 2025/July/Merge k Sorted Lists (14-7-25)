link: https://leetcode.com/problems/merge-k-sorted-lists/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

 // Helper function to merge two sorted lists
struct ListNode* merge(struct ListNode* l1, struct ListNode* l2) {
    struct ListNode dummy;
    struct ListNode* tail = &dummy;
    dummy.next = NULL;

    while (l1 && l2) {
        if (l1->val < l2->val) {
            tail->next = l1;
            l1 = l1->next;
        } else {
            tail->next = l2;
            l2 = l2->next;
        }
        tail = tail->next;
    }
    if (l1) tail->next = l1;
    if (l2) tail->next = l2;
    return dummy.next;
}

// Function to find the middle of the list
struct ListNode* getMiddle(struct ListNode* head) {
    struct ListNode *slow = head, *fast = head->next;
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}

// Main Merge Sort function
struct ListNode* sortList(struct ListNode* head) {
    if (!head || !head->next) return head;

    // Split the list into halves
    struct ListNode* mid = getMiddle(head);
    struct ListNode* right = mid->next;
    mid->next = NULL;

    // Recursively sort
    struct ListNode* leftSorted = sortList(head);
    struct ListNode* rightSorted = sortList(right);

    // Merge sorted halves
    return merge(leftSorted, rightSorted);
}

struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {
    struct ListNode *temp,*head=0,*temp1;
    for(int i=0;i<listsSize;i++)
    {
        temp=lists[i];
        while(temp!=0)
        {
        struct ListNode *newnode=(struct ListNode *)malloc(sizeof(struct ListNode));
        newnode->val=temp->val;
        newnode->next=0;
        if(head==0)
        temp1=head=newnode;
        else
        {
            temp1->next=newnode;
            temp1=newnode;
        }
        temp=temp->next;
        }
    }
    head = sortList(head);
    return head;
}
