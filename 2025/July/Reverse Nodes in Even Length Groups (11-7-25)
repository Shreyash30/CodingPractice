link: https://leetcode.com/problems/reverse-nodes-in-even-length-groups/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* reverse(struct ListNode* head) {
    if (head == NULL || head->next == NULL)
        return head;

    struct ListNode* newHead = reverse(head->next);
    head->next->next = head;
    head->next = NULL; 
    return newHead;
}

struct ListNode* reverseEvenLengthGroups(struct ListNode* head) {
    struct ListNode *beforetemp = head, *temp = head->next;
    int k = 2;

    while (temp != NULL) {
        // Step 1: Count actual group size
        struct ListNode* countPtr = temp;
        int count = 1;
        while (count < k && countPtr->next != NULL) {
            countPtr = countPtr->next;
            count++;
        }

        struct ListNode* starteven = temp;
        struct ListNode* endeven = countPtr;
        struct ListNode* nextGroup = endeven->next;

        // Temporarily isolate the group
        endeven->next = NULL;

        if (count % 2 == 0) {
            // Reverse the even-length group
             endeven = reverse(starteven);
            beforetemp->next = endeven;
            starteven->next = nextGroup;  // starteven is now the tail after reversal
            beforetemp = starteven;
        } else {
            // Don't reverse, just link normally
            beforetemp->next = starteven;
            beforetemp = endeven;
            endeven->next=nextGroup;
        }

        temp = nextGroup;
        k++;
    }

    return head;
}
