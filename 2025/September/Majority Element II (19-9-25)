link: https://leetcode.com/problems/majority-element-ii/description/

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* majorityElement(int* nums, int numsSize, int* returnSize) {
    int *arr = (int*)malloc(sizeof(int) * numsSize);
    int size = 0;

    int cand1 = -1, cand2 = -1;
    int votes1 = 0, votes2 = 0;

    // step 1: find candidates
    for (int i = 0; i < numsSize; i++) {
        if (cand1 == nums[i]) {
            votes1++;
        }
        else if (cand2 == nums[i] && nums[i] != cand1) {
            votes2++;
        }
        else if (votes1 == 0) {
            cand1 = nums[i];
            votes1 = 1;
        }
        else if (votes2 == 0 && nums[i] != cand1) {
            cand2 = nums[i];
            votes2 = 1;
        }
        else {
            votes1--;
            votes2--;
        }
    }

    // step 2: verify candidates
    int count1 = 0, count2 = 0;
    for (int i = 0; i < numsSize; i++) {
        if (nums[i] == cand1) count1++;
        else if (nums[i] == cand2) count2++;
    }

    if (count1 > numsSize / 3) arr[size++] = cand1;
    if (count2 > numsSize / 3) arr[size++] = cand2;

    *returnSize = size;
    return arr;
}
